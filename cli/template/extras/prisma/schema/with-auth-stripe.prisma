generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum PricingType {
  ONE_TIME
  RECURRING
}

enum PricingPlanInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  UNPAID
  PAUSED
}

// Models
model Post {
  id          String   @id @default(uuid())
  name        String?  @db.VarChar(256)
  content     String?
  createdById String
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz

  createdBy User @relation(fields: [createdById], references: [id])

  @@index([createdById], name: "created_by_idx")
  @@index([name], name: "name_idx")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  password      String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Post         Post[]
  Customer     Customer[]
  Subscription Subscription[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Customer {
  id               String  @id
  stripeCustomerId String?
  user             User    @relation(fields: [id], references: [id])
}

model Product {
  id          String   @id
  active      Boolean?
  name        String?
  description String?
  image       String?
  metadata    Json?

  prices Price[]
}

model Price {
  id              String   @id
  productId       String?
  active          Boolean?
  description     String?
  unitAmount      Int?
  currency        String?
  type            String?
  interval        String?
  intervalCount   Int?
  trialPeriodDays Int?
  metadata        Json?

  product      Product?       @relation(fields: [productId], references: [id])
  Subscription Subscription[]
}

model Subscription {
  id                 String              @id
  userId             String
  status             SubscriptionStatus?
  metadata           Json?
  priceId            String?
  quantity           Int?
  cancelAtPeriodEnd  Boolean?
  created            DateTime            @default(now()) @db.Timestamptz
  currentPeriodStart DateTime            @default(now()) @db.Timestamptz
  currentPeriodEnd   DateTime            @default(now()) @db.Timestamptz
  endedAt            DateTime?           @db.Timestamptz
  cancelAt           DateTime?           @db.Timestamptz
  canceledAt         DateTime?           @db.Timestamptz
  trialStart         DateTime?           @db.Timestamptz
  trialEnd           DateTime?           @db.Timestamptz

  price Price? @relation(fields: [priceId], references: [id])
  User  User?  @relation(fields: [userId], references: [id])
}
